@model List<ProjectVersion001.Models.ResultEntry>

@{
    ViewBag.Title = "Result";
}

<h2>Student Result</h2>
<p>
    @Html.ActionLink("Create New", "Create")
    <button class="btn btn-success" onclick="javascript:demoFromHTML();"> PDF Generate</button>
</p>


@*<table class="table table-striped">*@
<div id="result">
    <table class="table table-striped" id="tab_result">
        <tr>
            <th>
                @Html.DisplayName("Registration Id")
            </th>
            <th>
                @Html.DisplayName("Course Code")
            </th>
            <th>
                @Html.DisplayName("Grade")
            </th>
            <th>

            </th>

        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Student.RegistrationId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Course.Code)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Grade.Name)
                </td>
                <td>
                    @*@Html.ActionLink("Edit", "Edit", new { id=item.ResultEntryId }) |
                        @Html.ActionLink("Details", "Details", new { id=item.ResultEntryId }) |*@
                    @Html.ActionLink("Delete", "Delete", new { id = item.ResultEntryId })
                </td>
            </tr>
        }

    </table>
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script src="~/Scripts/jspdf.debug.js"></script>

        <script>
            function demoFromHTML() {
                var pdf = new jsPDF('p', 'pt', 'letter');
                // source can be HTML-formatted string, or a reference
                // to an actual DOM element from which the text will be scraped.
                source = $('#result')[0];

                // we support special element handlers. Register them with jQuery-style
                // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
                // There is no support for any other type of selectors
                // (class, of compound) at this time.
                specialElementHandlers = {
                    // element with id of "bypass" - jQuery style selector
                    '#bypassme': function (element, renderer) {
                        // true = "handled elsewhere, bypass text extraction"
                        return true
                    }
                };
                margins = {
                    top: 80,
                    bottom: 60,
                    left: 40,
                    width: 522
                };
                // all coords and widths are in jsPDF instance's declared units
                // 'inches' in this case
                pdf.fromHTML(
                source, // HTML string or DOM elem ref.
                margins.left, // x coord
                margins.top, { // y coord
                    'width': margins.width, // max width of content on PDF
                    'elementHandlers': specialElementHandlers
                },

                function (dispose) {
                    // dispose: object with X, Y of the last line add to the PDF
                    //          this allow the insertion of new lines after html
                    pdf.save('Result.pdf');
                },
                margins);
            }
        </script>
    }


